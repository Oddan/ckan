# See CKAN docs on installation from Docker Compose on usage
FROM debian:jessie
MAINTAINER Open Knowledge

# Install required system packages (as well as emacs, for convenience)
RUN apt-get -q -y update \
    && DEBIAN_FRONTEND=noninteractive apt-get -q -y upgrade \
    && apt-get -q -y install \
        python-dev \
        python-pip \
        python-virtualenv \
        python-wheel \
        libpq-dev \
        libxml2-dev \
        libxslt-dev \
        libgeos-dev \
        libssl-dev \
        libffi-dev \
        postgresql-client \
        build-essential \
        git-core \
        vim \
        wget \
        apache2 \
        libapache2-mod-wsgi \
        emacs \
    && apt-get -q clean \
    && rm -rf /var/lib/apt/lists/*

# Define environment variables
ENV CKAN_HOME /usr/lib/ckan
ENV CKAN_VENV $CKAN_HOME/venv
ENV CKAN_CONFIG /etc/ckan
ENV CKAN_STORAGE_PATH=/var/lib/ckan
ENV RELEASE_SCRIPT_PATH $CKAN_VENV/src/ckan/contrib/docker/scripts/release_edition

# Build-time variables specified by docker-compose.yml / .env
ARG CKAN_SITE_URL

# Create ckan user
RUN useradd -r -u 900 -m -c "ckan account" -d $CKAN_HOME -s /bin/false ckan

# Setup virtual environment for CKAN
RUN mkdir -p $CKAN_VENV $CKAN_CONFIG $CKAN_STORAGE_PATH && \
    virtualenv $CKAN_VENV && \
    ln -s $CKAN_VENV/bin/pip /usr/local/bin/ckan-pip &&\
    ln -s $CKAN_VENV/bin/paster /usr/local/bin/ckan-paster

# Setup CKAN
ADD . $CKAN_VENV/src/ckan/
RUN ckan-pip install -U pip && \
    ckan-pip install --upgrade --no-cache-dir -r $CKAN_VENV/src/ckan/requirement-setuptools.txt && \
    ckan-pip install --upgrade --no-cache-dir -r $CKAN_VENV/src/ckan/requirements.txt && \
    ckan-pip install -e $CKAN_VENV/src/ckan/ && \
    ckan-pip install -e "git+https://github.com/ckan/ckanext-spatial.git#egg=ckanext-spatial" && \
    ckan-pip install -r $CKAN_VENV/src/ckanext-spatial/pip-requirements.txt && \
    ln -s $CKAN_VENV/src/ckan/ckan/config/who.ini $CKAN_CONFIG/who.ini && \
    cp -v $CKAN_VENV/src/ckan/contrib/docker/ckan-entrypoint.sh /ckan-entrypoint.sh && \
    chmod +x /ckan-entrypoint.sh && \
    chown -R ckan:ckan $CKAN_HOME $CKAN_VENV $CKAN_CONFIG $CKAN_STORAGE_PATH

# copy in predefined settings for use with prototype, and activate site with Apache
RUN cp -v $RELEASE_SCRIPT_PATH/apache.wsgi $CKAN_CONFIG/apache.wsgi && \
    cp -v $RELEASE_SCRIPT_PATH/ckan_default.conf /etc/apache2/sites-available/ckan_default.conf && \
    cp -v $RELEASE_SCRIPT_PATH/ports.conf /etc/apache2/ports.conf && \
    cp -v $RELEASE_SCRIPT_PATH/production.ini /etc/ckan/production.ini.tmp && \
    a2ensite ckan_default && \
    a2dissite 000-default

# activate all CO2DataShare plugins
RUN . $CKAN_VENV/bin/activate && \
    cd $CKAN_VENV/src/ckan/ckanext-cdsmetadata && python setup.py develop && \
    cd $CKAN_VENV/src/ckanext-spatial && python setup.py develop

ENTRYPOINT ["/ckan-entrypoint.sh"]


EXPOSE 5000
EXPOSE 8080

ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2
ENV APACHE_LOCK_DIR /var/run/apache2

RUN chown -R www-data:www-data $APACHE_LOG_DIR
RUN chown -R www-data:www-data $APACHE_LOCK_DIR
RUN adduser ckan www-data
run chmod -R g+w $APACHE_LOG_DIR && chmod -R g+w $APACHE_LOCK_DIR

#run chown www-data:www-data $APACHE_PID_FILE

USER ckan
CMD apachectl -D FOREGROUND

#cmd tail -f /dev/null
#CMD ["ckan-paster","serve","/etc/ckan/production.ini"]
